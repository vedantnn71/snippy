datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  oauth_token        String? @db.Text
  oauth_token_secret String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  snippets      Snippet[]
  lists         List[]
  tags          Tag[]
  collections   Collection[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Snippet {
  id          String  @id @default(cuid())
  isCommand   Boolean
  code        String  @db.Text
  name        String
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  list        List?   @relation(fields: [listId], references: [id])
  listId      String?
  tags        Tag[]

  @@map("snippets")
}

model List {
  id           String      @id @default(cuid())
  name         String
  snippets     Snippet[]
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  Collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?

  @@map("lists")
}

model Tag {
  id       String    @id @default(cuid())
  name     String
  snippets Snippet[]
  userId   String
  user     User      @relation(fields: [userId], references: [id])

  @@map("tags")
}

model Collection {
  id     String @id @default(cuid())
  name   String
  lists  List[]
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("collections")
}
